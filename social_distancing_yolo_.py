# -*- coding: utf-8 -*-
"""Social_Distancing_YOLO .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1szK-PD6nCRuuxsM9xeEjOl-LvhhPd1Rk
"""

!git clone https://github.com/pjreddie/darknet
!cd darknet
!make
!wget https://pjreddie.com/media/files/yolov3.weights 
!wget https://www.techsimplus.com/media/Screenshot_2020-06-13_at_7.41.41_AM.png
!mv /content/Screenshot_2020-06-13_at_7.41.41_AM.png /content/image.png
!apt-get -qq install -y libsm6 libxext6
!pip install -q -U opencv-python

from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import os
import time
import matplotlib.pyplot as plt

labelsPath = "/content/darknet/data/coco.names"
Labels = open(labelsPath).read().strip().split("\n")

weightPath = "yolov3.weights"
configPath = "/content/darknet/cfg/yolov3.cfg"

Colors = np.random.randint(100, 255, (len(Labels), 3))

net = cv2.dnn.readNetFromDarknet(configPath, weightPath)
image = cv2.imread("image.png")
H, W = image.shape[:2]

layers = net.getLayerNames()
ucl = net.getUnconnectedOutLayers()
LayerName = []
for i in ucl:
    LayerName.append(layers[i[0]-1])

convertedImage = cv2.dnn.blobFromImage(image, 1/255, (416, 416), swapRB=True, crop=False)
net.setInput(convertedImage)
prediction = net.forward(LayerName)

X1 = []
X2 = []
Y1 = []
Y2 = []
Person = []
no_of_ppl = 0
xmid = []
ymid = []

for output in prediction:
    for detection in output:
        score = detection[5:]
        conf = np.max(score)
        classId = np.argmax(score)
        if Labels[classId] == "person":              #detecting person
          if conf > 0.85:                            #cheaking confidence is grater than 85%
              Cx,Cy,w,h = (detection[:4] * np.array([W,H,W,H])).astype("int")
              x = int(Cx - (w//2))
              y = int(Cy - (h//2))
              M = (x,y), (x+w, y+h)
              cv2.rectangle(image, (x,y), (x+w, y+h), (0,255,0), 2)          #drawing rectangle on identified person 
              no_of_ppl+=1
              cv2.putText(  image,str(no_of_ppl), (x,int(y+(h/2))), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0,255,255), 3)    # alotting index no. to person

              
              #adding details to lists
              X1.append(x)
              Y1.append(y)
              X2.append(x+w)
              Y2.append(y+h)
              Person.append("person" + str(no_of_ppl))
              xmid.append(abs(x + (w/2)))
              ymid.append(abs(y + (h/2)))


#making DataFrame of all the collected data 
import pandas as pd
df = pd.DataFrame(list(zip(Person, X1, X2, Y1, Y2, xmid, ymid)), 
               columns =['person', 'x_1', 'x_2', 'y_1', 'y_2', 'x_mid', 'y_mid']) 
           
cv2_imshow(image)           #displaying resultant image

df

#caldulating distences between all the people 

flag = []
log = []
all_distances = []
xlen = len(df["x_2"])
for i in range(len(df["x_1"])):
  for j in range(i+1, xlen):
    distance = np.sqrt((df["x_mid"][i]-df["x_mid"][j])**2 + (df["y_mid"][i]-df["y_mid"][j])**2)  
    all_distances.append((distance, i+1 ,j+1))

    # finding the people crossing min. threshold distance
    if distance < 100:
      flag.append("person" + str(i+1))
      flag.append("person" + str(j+1))
      log.append((i+1,j+1)) 

all_distances   #distances between all the people

flag = list(dict.fromkeys(flag))
flag   #group of people not following distancing

doty = int(image.shape[0]-(image.shape[0]*0.9))
doty2 = int(image.shape[0]-(image.shape[0]*0.85))
dotx = int(image.shape[1]-(image.shape[1]*0.15))
center_g = (dotx, doty)
center_g_text = ((dotx + 20), (doty + 5))
center_r = (dotx, doty2)
center_r_text = ((dotx + 20), (doty2 + 5))

#making the boxes around the people not following distances red in color
for i in range(len(flag)):
  for j in range(xlen):      
    if df["person"][j] == flag[i]:
      x_1 = df["x_1"][j]
      x_2 = df["x_2"][j]
      y_1 = df["y_1"][j]
      y_2 = df["y_2"][j]
      cv2.rectangle(image, (x_1, y_1), (x_2, y_2), (0,0,255), 2)
    
cv2.circle(image, center_g, 9, (0, 255, 0), 12)                                                       # defining legend for green box
cv2.putText(  image,str("Following"), center_g_text , cv2.FONT_HERSHEY_PLAIN, 1.5, (0,0,0), 3)    

cv2.circle(image, center_r, 9, (0, 0, 255), 11)                                                       # defining legend for red box
cv2.putText(  image,str("Not_Following"), center_r_text , cv2.FONT_HERSHEY_PLAIN, 1.5, (0,0,0), 3)    

cv2_imshow(image)

